{
  "swagger": "2.0",
  "info": {
    "title": "Final Project CSE-341 Optica-AL API",
    "version": "0.0.4",
    "description": "API documentation"
  },
  "host": "cse-341-final-22b8.onrender.com",
  "basePath": "/",
  "schemes": [
    "https"
  ],
  "securityDefinitions": {
    "BearerAuth": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header",
      "description": "Ingrese el token JWT con el formato: Bearer {token}"
    }
  },
  "paths": {
    "/": {
      "get": {
        "tags": [
          "Version"
        ],
        "summary": "Get API version",
        "description": "Returns the current version of the API",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/swagger/api-docs": {
      "get": {
        "tags": [
          "Swagger-UI"
        ],
        "summary": "Swagger UI",
        "description": "",
        "responses": {
          "default": {
            "description": ""
          }
        }
      }
    },
    "/users/": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get all users",
        "description": "Returns a list of all users",
        "responses": {
          "200": {
            "description": "List of users",
            "schema": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "example": "array"
                },
                "items": {
                  "$ref": "#/definitions/User"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Create a new user",
        "description": "Creates a new user",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "User object to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User created successfully",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "422": {
            "description": "Validation error"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/users/{id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get user by ID",
        "description": "Returns a user by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "User found",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update an existing user",
        "description": "Updates an existing user",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "User object to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User updated successfully",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "422": {
            "description": "Validation error"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete a user",
        "description": "Deletes a user by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "User deleted successfully"
          },
          "400": {
            "description": "Invalid request"
          },
          "422": {
            "description": "Validation error"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/products/": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Get all products",
        "description": "Returns a list of all products",
        "responses": {
          "200": {
            "description": "List of products",
            "schema": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "example": "array"
                },
                "items": {
                  "$ref": "#/definitions/Product"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Products"
        ],
        "summary": "Create a new product",
        "description": "Creates a new product with the provided data",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Product data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Product"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Product created",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "400": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/products/{id}": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Get product by ID",
        "description": "Returns a product by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Product found",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "404": {
            "description": "Product not found"
          }
        }
      },
      "put": {
        "tags": [
          "Products"
        ],
        "summary": "Update a product",
        "description": "Updates an existing product by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Product data to update",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Product"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product updated",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Product not found"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Products"
        ],
        "summary": "Delete a product",
        "description": "Deletes a product by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Product deleted"
          },
          "404": {
            "description": "Product not found"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/auth/github": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "GitHub OAuth login",
        "description": "Redirige al usuario a GitHub para autenticación OAuth.",
        "responses": {
          "default": {
            "description": ""
          }
        }
      }
    },
    "/auth/github/callback": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "GitHub OAuth callback",
        "description": "Callback de GitHub OAuth. Devuelve un JWT si la autenticación es exitosa.",
        "responses": {
          "200": {
            "description": "JWT generado correctamente",
            "schema": {
              "type": "object",
              "properties": {
                "token": {
                  "type": "string",
                  "example": "jwt-token"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "Autenticación fallida"
          }
        }
      }
    },
    "/auth/failure": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Fallo de autenticación",
        "description": "Devuelve un mensaje de error si la autenticación falla.",
        "responses": {
          "401": {
            "description": "Fallo de autenticación",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Authentication failed"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/orders/": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Get all orders",
        "description": "Returns a list of all orders for the authenticated user",
        "responses": {
          "200": {
            "description": "List of orders",
            "schema": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "example": "array"
                },
                "items": {
                  "$ref": "#/definitions/Order"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Create a new order",
        "description": "Creates a new order for the authenticated user",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Order data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Order"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Order created",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          },
          "400": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/orders/{id}": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Get order by ID",
        "description": "Returns an order by ID for the authenticated user",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Order found",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          },
          "404": {
            "description": "Order not found"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Orders"
        ],
        "summary": "Update an order",
        "description": "Updates an existing order by ID for the authenticated user",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Order data to update",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Order"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Order updated",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Order not found"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Orders"
        ],
        "summary": "Delete an order",
        "description": "Deletes an order by ID for the authenticated user",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Order deleted"
          },
          "404": {
            "description": "Order not found"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/prescriptions/": {
      "get": {
        "tags": [
          "Prescriptions"
        ],
        "summary": "Get all prescriptions",
        "description": "Returns a list of all prescriptions for the authenticated user",
        "responses": {
          "200": {
            "description": "List of prescriptions",
            "schema": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "example": "array"
                },
                "items": {
                  "$ref": "#/definitions/Prescription"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Prescriptions"
        ],
        "summary": "Create a new prescription",
        "description": "Creates a new prescription for the authenticated user",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Prescription data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Prescription"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Prescription created",
            "schema": {
              "$ref": "#/definitions/Prescription"
            }
          },
          "400": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/prescriptions/{id}": {
      "get": {
        "tags": [
          "Prescriptions"
        ],
        "summary": "Get prescription by ID",
        "description": "Returns a prescription by ID for the authenticated user",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Prescription found",
            "schema": {
              "$ref": "#/definitions/Prescription"
            }
          },
          "404": {
            "description": "Prescription not found"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Prescriptions"
        ],
        "summary": "Update a prescription",
        "description": "Updates an existing prescription by ID for the authenticated user",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Prescription data to update",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Prescription"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Prescription updated",
            "schema": {
              "$ref": "#/definitions/Prescription"
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Prescription not found"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Prescriptions"
        ],
        "summary": "Delete a prescription",
        "description": "Deletes a prescription by ID for the authenticated user",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Prescription deleted"
          },
          "404": {
            "description": "Prescription not found"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    }
  },
  "definitions": {
    "User": {
      "type": "object",
      "properties": {
        "oauthId": {
          "type": "string",
          "example": "oauth-provider-id"
        },
        "email": {
          "type": "string",
          "example": "user@email.com"
        },
        "name": {
          "type": "string",
          "example": "John Doe"
        },
        "profilePicture": {
          "type": "string",
          "example": "https://example.com/profile.jpg"
        },
        "type": {
          "type": "string",
          "example": "user"
        }
      }
    },
    "Product": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "Ray-Ban Wayfarer"
        },
        "brand": {
          "type": "string",
          "example": "Ray-Ban"
        },
        "price": {
          "type": "number",
          "example": 120.5
        },
        "type": {
          "type": "string",
          "example": "eyeglasses"
        },
        "description": {
          "type": "string",
          "example": "Classic eyeglasses frame."
        },
        "stock": {
          "type": "number",
          "example": 10
        },
        "attributes": {
          "type": "object",
          "properties": {
            "frameMaterial": {
              "type": "string",
              "example": "acetate"
            },
            "frameColor": {
              "type": "string",
              "example": "black"
            },
            "lensMaterial": {
              "type": "string",
              "example": "plastic"
            },
            "lensColor": {
              "type": "string",
              "example": "clear"
            },
            "gender": {
              "type": "string",
              "example": "unisex"
            },
            "shape": {
              "type": "string",
              "example": "rectangle"
            },
            "lensType": {
              "type": "string",
              "example": "monthly"
            },
            "power": {
              "type": "string",
              "example": "-1.25"
            },
            "baseCurve": {
              "type": "string",
              "example": "8.6"
            },
            "diameter": {
              "type": "string",
              "example": "14.2"
            },
            "material": {
              "type": "string",
              "example": "hydrogel"
            }
          }
        }
      }
    },
    "Prescription": {
      "type": "object",
      "properties": {
        "user": {
          "type": "string",
          "example": "60d21b4667d0d8992e610c84"
        },
        "sphere": {
          "type": "number",
          "example": -1.25
        },
        "cylinder": {
          "type": "number",
          "example": -0.5
        },
        "axis": {
          "type": "number",
          "example": 90
        },
        "addition": {
          "type": "number",
          "example": 2
        },
        "prism": {
          "type": "number",
          "example": 0.5
        },
        "base": {
          "type": "string",
          "example": "up"
        },
        "notes": {
          "type": "string",
          "example": "Patient requires progressive lenses."
        },
        "dateIssued": {
          "type": "string",
          "example": "2024-05-01"
        },
        "expirationDate": {
          "type": "string",
          "example": "2025-05-01"
        }
      }
    },
    "Order": {
      "type": "object",
      "properties": {
        "user": {
          "type": "string",
          "example": "60d21b4667d0d8992e610c84"
        },
        "prescription": {
          "type": "string",
          "example": "60d21b4667d0d8992e610c85"
        },
        "product": {
          "type": "string",
          "example": "60d21b4967d0d8992e610c86"
        },
        "quantity": {
          "type": "number",
          "example": 2
        },
        "total": {
          "type": "number",
          "example": 241
        },
        "status": {
          "type": "string",
          "example": "pending"
        },
        "orderDate": {
          "type": "string",
          "example": "2024-06-01"
        }
      }
    }
  }
}